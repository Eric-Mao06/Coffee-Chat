"use strict";(()=>{var e={};e.id=198,e.ids=[198],e.modules={4379:e=>{e.exports=require("@pinecone-database/pinecone")},145:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},2079:e=>{e.exports=import("openai")},6249:(e,t)=>{Object.defineProperty(t,"l",{enumerable:!0,get:function(){return function e(t,r){return r in t?t[r]:"then"in t&&"function"==typeof t.then?t.then(t=>e(t,r)):"function"==typeof t&&"default"===r?t:void 0}}})},9537:(e,t,r)=>{r.a(e,async(e,n)=>{try{r.r(t),r.d(t,{config:()=>u,default:()=>l,routeModule:()=>d});var a=r(1802),i=r(7153),o=r(6249),s=r(9352),c=e([s]);s=(c.then?(await c)():c)[0];let l=(0,o.l)(s,"default"),u=(0,o.l)(s,"config"),d=new a.PagesAPIRouteModule({definition:{kind:i.x.PAGES_API,page:"/api/search",pathname:"/api/search",bundlePath:"",filename:""},userland:s});n()}catch(e){n(e)}})},6200:(e,t,r)=>{r.a(e,async(e,n)=>{try{r.d(t,{O:()=>c,f:()=>s});var a=r(2079),i=r(4379),o=e([a]);let s=new(a=(o.then?(await o)():o)[0]).OpenAI({apiKey:process.env.OPENAI_API_KEY}),c=new i.Pinecone({apiKey:process.env.PINECONE_API_KEY});n()}catch(e){n(e)}})},4217:(e,t,r)=>{r.d(t,{O:()=>o});let n=require("@supabase/supabase-js"),a="https://ubbapfwdpzfulktfzlye.supabase.co",i="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InViYmFwZndkcHpmdWxrdGZ6bHllIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MjkwNDk0NzUsImV4cCI6MjA0NDYyNTQ3NX0.dpRcQx0VkNPUn-v7KVKf739MH4Qc3gvKovibYdqGE1Y";if(!a||!i)throw Error("Missing Supabase environment variables");let o=(0,n.createClient)(a,i)},9352:(e,t,r)=>{r.a(e,async(e,n)=>{try{r.r(t),r.d(t,{default:()=>s});var a=r(6200),i=r(4217),o=e([a]);async function s(e,t){if("GET"===e.method){let{q:r}=e.query;if(!r||"string"!=typeof r)return t.status(400).json({error:"Search query is required"});try{let e;let n=(await a.f.embeddings.create({model:"text-embedding-ada-002",input:r})).data[0].embedding,o=a.O.Index("alumni-profiles"),s=await o.query({vector:n,topK:10,includeMetadata:!0,filter:{score:{$gte:.5}}});if(s.matches.length>0){let t=s.matches.map(e=>e.id),{data:r,error:n}=await i.O.from("alumni_profiles").select("*").in("id",t);if(n)throw n;e=r}else{let{data:t,error:r}=await i.O.from("alumni_profiles").select("*");if(r)throw r;e=t}let l=await c(r,e);return t.status(200).json({data:l})}catch(e){return console.error("Search error:",e),t.status(500).json({error:"An error occurred during the search"})}}else t.setHeader("Allow",["GET"]),t.status(405).end(`Method ${e.method} Not Allowed`)}async function c(e,t){let r=`
Query: "${e}"

Profiles:
${t.map(e=>`${e.name}: ${e.role} at ${e.company}. Interests: ${e.interests.join(", ")}`).join("\n")}

For each profile, provide a relevance score from 0 to 10 and a brief explanation of why this profile might be relevant to the query. Be very lenient in your scoring, considering even loose connections. Use only the information provided in the profiles. Format your response as JSON:
[
  {
    "id": "profile_id",
    "score": 0,
    "blurb": "Explanation of potential relevance"
  },
  ...
]
`,n=await a.f.chat.completions.create({model:"gpt-3.5-turbo",messages:[{role:"user",content:r}]}),i=JSON.parse(n.choices[0].message.content).map(e=>{let r=t.find(t=>t.id===e.id);return r?{...r,score:e.score,blurb:e.blurb}:null}).filter(Boolean);return i.sort((e,t)=>t.score-e.score),i}a=(o.then?(await o)():o)[0],n()}catch(e){n(e)}})},7153:(e,t)=>{var r;Object.defineProperty(t,"x",{enumerable:!0,get:function(){return r}}),function(e){e.PAGES="PAGES",e.PAGES_API="PAGES_API",e.APP_PAGE="APP_PAGE",e.APP_ROUTE="APP_ROUTE"}(r||(r={}))},1802:(e,t,r)=>{e.exports=r(145)}};var t=require("../../webpack-api-runtime.js");t.C(e);var r=t(t.s=9537);module.exports=r})();